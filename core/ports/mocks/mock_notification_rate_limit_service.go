// Code generated by MockGen. DO NOT EDIT.
// Source: notification_rate_limit_service.go

// Package ports is a generated GoMock package.
package ports

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNotificationRateLimitService is a mock of NotificationRateLimitService interface.
type MockNotificationRateLimitService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRateLimitServiceMockRecorder
}

// MockNotificationRateLimitServiceMockRecorder is the mock recorder for MockNotificationRateLimitService.
type MockNotificationRateLimitServiceMockRecorder struct {
	mock *MockNotificationRateLimitService
}

// NewMockNotificationRateLimitService creates a new mock instance.
func NewMockNotificationRateLimitService(ctrl *gomock.Controller) *MockNotificationRateLimitService {
	mock := &MockNotificationRateLimitService{ctrl: ctrl}
	mock.recorder = &MockNotificationRateLimitServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRateLimitService) EXPECT() *MockNotificationRateLimitServiceMockRecorder {
	return m.recorder
}

// IsExceeded mocks base method.
func (m *MockNotificationRateLimitService) IsExceeded(userID, notificationType string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExceeded", userID, notificationType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExceeded indicates an expected call of IsExceeded.
func (mr *MockNotificationRateLimitServiceMockRecorder) IsExceeded(userID, notificationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExceeded", reflect.TypeOf((*MockNotificationRateLimitService)(nil).IsExceeded), userID, notificationType)
}
