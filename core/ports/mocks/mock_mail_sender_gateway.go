// Code generated by MockGen. DO NOT EDIT.
// Source: mail_sender_gateway.go

// Package ports is a generated GoMock package.
package ports

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMailSenderGateway is a mock of MailSenderGateway interface.
type MockMailSenderGateway struct {
	ctrl     *gomock.Controller
	recorder *MockMailSenderGatewayMockRecorder
}

// MockMailSenderGatewayMockRecorder is the mock recorder for MockMailSenderGateway.
type MockMailSenderGatewayMockRecorder struct {
	mock *MockMailSenderGateway
}

// NewMockMailSenderGateway creates a new mock instance.
func NewMockMailSenderGateway(ctrl *gomock.Controller) *MockMailSenderGateway {
	mock := &MockMailSenderGateway{ctrl: ctrl}
	mock.recorder = &MockMailSenderGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailSenderGateway) EXPECT() *MockMailSenderGatewayMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMailSenderGateway) Send(userID, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", userID, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMailSenderGatewayMockRecorder) Send(userID, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMailSenderGateway)(nil).Send), userID, message)
}
